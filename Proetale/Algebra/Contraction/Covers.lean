import Mathlib
import Proetale.Mathlib.CategoryTheory.MorphismProperty.IndSpreads
import Proetale.Mathlib.CategoryTheory.Limits.Shapes.FiniteLimits
import Proetale.Mathlib.CategoryTheory.Sites.MorphismProperty
import Proetale.Mathlib.CategoryTheory.Sites.Sieves
import Proetale.Mathlib.CategoryTheory.Sites.Finite

/-!
# Another attempt at pro-contractions.

In this file we work in `CommRingCat·µí·µñ`, to be able to use the `0`-hypercover API.
The construction is very similar to the stacks project construction, but
has some subtle differences.
-/

universe s t w' w v u

namespace CategoryTheory

open CategoryTheory Limits

variable {C : Type u} [Category.{v} C] (K : Precoverage C)

@[ext]
structure FiniteFamilies (C : Type*) [Category C] where
  set : Set C
  finite : set.Finite

instance : Preorder (FiniteFamilies C) where
  le U V := U.set ‚äÜ V.set
  le_refl _ := le_rfl
  le_trans _ _ _ := le_trans

@[simps]
def FiniteFamilies.map {D : Type*} [Category D] (F : C ‚•§ D) :
    FiniteFamilies C ‚•§ FiniteFamilies D where
  obj s :=
    { set := F.obj '' s.set
      finite := s.finite.image _ }
  map f := homOfLE (Set.image_mono (leOfHom f))

structure SCov (K : Precoverage C) (X : C) where
  presieve : Presieve X
  mem : presieve ‚àà K X

structure Cov (K : Precoverage C) (X : C) where
  toZeroHypercover : Precoverage.ZeroHypercover.{w} K X

variable {K : Precoverage C} {X : C}

instance : Preorder (SCov K X) where
  le U V := U.presieve ‚â§ V.presieve
  le_refl _ := le_rfl
  le_trans _ _ _ := le_trans

def SCov.zeroHypercover (U : SCov K X) : K.ZeroHypercover X where
  I‚ÇÄ := U.presieve.uncurry
  X i := i.1.1
  f i := i.1.2
  mem‚ÇÄ := by
    simp only [PreZeroHypercover.presieve‚ÇÄ]
    convert U.2
    refine le_antisymm ?_ ?_
    ¬∑ intro Z g ‚ü®i‚ü©
      exact i.2
    ¬∑ intro Z g hg
      exact .mk (‚ü®‚ü®Z, g‚ü©, hg‚ü© : U.presieve.uncurry)

namespace Cov

@[ext]
structure Hom (U V : Cov K X) where
  œÉ : V.1.I‚ÇÄ ‚Üí U.1.I‚ÇÄ
  iso (i : V.1.I‚ÇÄ) : U.1.X (œÉ i) ‚ü∂ V.1.X i
  [isIso (i : V.1.I‚ÇÄ) : IsIso (iso i)]
  w (i : V.1.I‚ÇÄ) : iso i ‚â´ V.1.f _ = U.1.f _ := by cat_disch

attribute [reassoc (attr := simp)] Hom.w
attribute [instance] Hom.isIso

@[simps]
def Hom.id (U : Cov K X) : U.Hom U where
  œÉ := _root_.id
  iso _ := ùüô _

@[simps]
def Hom.comp {U V W : Cov K X} (f : U.Hom V) (g : V.Hom W) : U.Hom W where
  œÉ i := f.œÉ (g.œÉ i)
  iso _ := f.iso _ ‚â´ g.iso _

open Limits

variable [‚àÄ (X : C), ‚àÄ (U : Cov K X), HasWidePullback _ U.1.X U.1.f]

variable (X P) in
@[simps! id_œÉ id_iso comp_œÉ comp_iso]
instance : Category (Cov K X) where
  Hom := Hom
  id := Hom.id
  comp := Hom.comp
  id_comp := by intros; ext <;> simp; ext; simp
  comp_id := by intros; ext <;> simp; ext; simp
  assoc := by intros; ext <;> simp; ext; simp

instance [K.HasIsos] : Nonempty (Cov K X) :=
  ‚ü®‚ü®Precoverage.ZeroHypercover.singleton (ùüô X) (K.mem_coverings_of_isIso _)‚ü©‚ü©

variable (K) in
@[simps -isSimp, simps! obj_hom]
noncomputable
def diag (X : C) : Cov.{w} K X ‚•§ Over X where
  obj U := Over.mk (WidePullback.base U.1.f)
  map {U V} f := Over.homMk <| WidePullback.lift (WidePullback.base _)
    (fun j ‚Ü¶ WidePullback.œÄ _ (f.œÉ j) ‚â´ (f.iso j)) (by simp)

end Cov

namespace SCov

variable (K) in
@[simps]
def toCov (X : C) : (SCov K X)·µí·µñ ‚•§ Cov.{max u v} K X where
  obj U := ‚ü®U.1.zeroHypercover‚ü©
  map {U V} f :=
    { œÉ i := ‚ü®i.1, leOfHom f.1 _ i.2‚ü©
      iso i := ùüô _
      w i := by simp only [Category.id_comp]; rfl }
  map_id _ := rfl
  map_comp _ _ := by apply Cov.Hom.ext <;> cat_disch

variable [‚àÄ (X : C) (U : SCov K X), HasWidePullback _ _ U.zeroHypercover.f]

variable (K) in
noncomputable
def diag (X : C) : (SCov K X)·µí·µñ ‚•§ Over X where
  obj U := Over.mk (WidePullback.base U.1.zeroHypercover.f)
  map {U V} f := Over.homMk <| WidePullback.lift (WidePullback.base _)
    (fun j ‚Ü¶ WidePullback.œÄ _ (‚ü®j.1, leOfHom f.1 _ j.2‚ü© : U.1.zeroHypercover.I‚ÇÄ))
    (by intro; exact WidePullback.œÄ_arrow _ _)

instance [K.HasIsos] : Nonempty (SCov K X) :=
  ‚ü®‚ü®.singleton (ùüô X), K.mem_coverings_of_isIso _‚ü©‚ü©

instance [K.IsStableUnderSup] : IsDirected (SCov K X) (¬∑ ‚â§ ¬∑) where
  directed U V :=
    ‚ü®‚ü®U.presieve ‚äî V.presieve, K.sup_mem_coverings U.2 V.2‚ü©,
      le_sup_left (a := U.1), le_sup_right (a := U.1)‚ü©

example [K.HasIsos] [K.IsStableUnderSup] : IsCofiltered (SCov K X)·µí·µñ :=
  inferInstance

end SCov

variable [‚àÄ (X : C) (U : SCov K X), HasWidePullback _ _ U.zeroHypercover.f]

namespace Precoverage

variable (X : C)

section

variable (K) in
noncomputable
def precontraction (X : C) [HasLimitsOfShape (SCov K X)·µí·µñ (Over X)] : Over X :=
  limit (SCov.diag K X)

variable [HasLimitsOfShape (SCov K X)·µí·µñ (Over X)]

variable (K) in
noncomputable
def Precontraction.œÄ {Y : C} (f : Y ‚ü∂ X) (h : Presieve.singleton f ‚àà K X) :
    K.precontraction X ‚ü∂ Over.mk f :=
  letI U : SCov K X := ‚ü®_, h‚ü©
  limit.œÄ (SCov.diag K X) ‚ü®U‚ü© ‚â´
    Over.homMk (WidePullback.œÄ (U.zeroHypercover.f) ‚ü®‚ü®_, f‚ü©, ‚ü®‚ü©‚ü©)
      (WidePullback.œÄ_arrow _ _)

@[reassoc (attr := simp)]
lemma Precontraction.œÄ_arrow {Y : C} (f : Y ‚ü∂ X)
    (h : Presieve.singleton f ‚àà K X) :
    (Precontraction.œÄ K X f h).left ‚â´ f = (K.precontraction X).hom := by
  simpa using (Precontraction.œÄ K X f h).w

end

variable [‚àÄ X, HasLimitsOfShape (SCov K X)·µí·µñ (Over X)]

namespace Contraction.Construction

variable (K) in
noncomputable
def obj : ‚Ñï ‚Üí C
  | 0 => X
  | n + 1 => (K.precontraction (obj n)).left

variable (K) in
noncomputable
def diag : ‚Ñï·µí·µñ ‚•§ C := Functor.ofOpSequence (X := obj K X)
  fun _ ‚Ü¶ (K.precontraction _).hom

variable (K) in
noncomputable
def objBase (n : ‚Ñï) : obj K X n ‚ü∂ X :=
  (diag K X).map (homOfLE <| n.zero_le).op

lemma diag_map_le_succ (n : ‚Ñï) (hn : n ‚â§ n + 1) :
    (diag K X).map (homOfLE hn).op = (K.precontraction _).hom := by
  simp [diag]

noncomputable
def diagHomBase : diag K X ‚ü∂ (Functor.const _).obj X where
  app n := objBase K X n.1
  naturality := sorry

end Contraction.Construction

open Contraction

variable [HasLimitsOfShape ‚Ñï·µí·µñ C]

variable (K) in
noncomputable
def contraction : C :=
  limit (Contraction.Construction.diag K X)

variable (K) in
noncomputable
abbrev contraction.œÄ (n : ‚Ñï) : contraction K X ‚ü∂ Construction.obj K X n :=
  limit.œÄ _ _

variable (K) in
noncomputable def Contraction.base : contraction K X ‚ü∂ X :=
  contraction.œÄ _ _ 0

lemma contraction.w (n m : ‚Ñï) (hmn : n ‚â§ m) :
    contraction.œÄ K X m ‚â´ (Construction.diag K X).map ‚ü®homOfLE hmn‚ü© = contraction.œÄ K X n :=
  limit.w _ _

variable (P : MorphismProperty C)
variable [MorphismProperty.ProSpreads.{0, 0} P]

lemma exists_comp_eq_id_contraction [Limits.HasPullbacks C]
    (HK : ‚àÄ {A B : C} (f : A ‚ü∂ B), P f ‚Üí Presieve.singleton f ‚àà K B)
    {Y : C} (f : Y ‚ü∂ K.contraction X) (hf : P f) :
    ‚àÉ (g : K.contraction X ‚ü∂ Y), g ‚â´ f = ùüô (K.contraction X) := by
  obtain ‚ü®n, D', u, v, hv, hu‚ü© :
      ‚àÉ (n : ‚Ñï) (D' : C) (u : D' ‚ü∂ Construction.obj K X n) (v : Y ‚ü∂ D'),
        IsPullback f v (contraction.œÄ K X n) u ‚àß P u := by
    obtain ‚ü®‚ü®n‚ü©, D', f', g, h, hf'‚ü© := P.exists_isPullback_of_isCofiltered
      (J := ‚Ñï·µí·µñ) (D := Construction.diag K X)
      (limit.cone _) (limit.isLimit _) f hf
    use n, D', f', g, h
  let l : K.contraction X ‚ü∂ Y := by
    refine hv.lift (ùüô _) (contraction.œÄ K X (n + 1) ‚â´ (Precontraction.œÄ _ _ u (HK _ hu)).left) ?_
    have := limit.w (Construction.diag K X) ‚ü®homOfLE (Nat.le_succ n)‚ü©
    dsimp only [Nat.succ_eq_add_one, homOfLE_leOfHom] at this
    simp only [contraction.œÄ, Category.id_comp, Category.assoc, Precontraction.œÄ_arrow, ‚Üê this]
    simp [Construction.diag, Functor.ofOpSequence]
  use l
  simp [l]

end Precoverage

namespace MorphismProperty

variable (P : MorphismProperty C) [HasFiniteWidePullbacks C]

abbrev finitePrecoverage : Precoverage C := P.precoverage ‚äì Precoverage.finite _

instance (X : C) (U : SCov P.finitePrecoverage X) : Finite U.zeroHypercover.I‚ÇÄ :=
  U.2.2

noncomputable def contraction
    [‚àÄ X, HasLimitsOfShape (SCov P.finitePrecoverage X)·µí·µñ (Over X)]
    [HasLimitsOfShape ‚Ñï·µí·µñ C] (X : C) : C :=
  P.finitePrecoverage.contraction X

variable [‚àÄ X, HasLimitsOfShape (SCov P.finitePrecoverage X)·µí·µñ (Over X)]
  [HasLimitsOfShape ‚Ñï·µí·µñ C]

noncomputable def Contraction.base (X : C) : P.contraction X ‚ü∂ X :=
  Precoverage.Contraction.base _ X

lemma pro_precontraction_hom [P.RespectsIso] [P.ContainsIdentities] (X : C) :
    pro.{max u v} P (P.finitePrecoverage.precontraction X).hom := by
  refine ‚ü®(SCov P.finitePrecoverage X)·µí·µñ, inferInstance, inferInstance,
    SCov.diag _ _ ‚ãô CategoryTheory.Over.forget _, ?_, ?_, ?_, fun j ‚Ü¶ ‚ü®?_, ?_‚ü©‚ü©
  ¬∑ dsimp
    sorry
  ¬∑ exact Functor.whiskerRight
      (limit.cone <| SCov.diag P.finitePrecoverage X).œÄ
      (CategoryTheory.Over.forget X)
  ¬∑ exact isLimitOfPreserves (CategoryTheory.Over.forget X) (limit.isLimit _)
  ¬∑ sorry
  ¬∑ sorry

lemma pro_pro_contractionBase [P.RespectsIso] [P.ContainsIdentities] (X : C) :
    pro.{0} (pro.{max u v} P) (Contraction.base P X) := by
  refine ‚ü®‚Ñï·µí·µñ, inferInstance, inferInstance,
      Precoverage.Contraction.Construction.diag P.finitePrecoverage X,
      ?_, (limit.cone _).œÄ, limit.isLimit _, ?_‚ü©
  ¬∑ exact { app n := sorry, naturality := sorry }
  ¬∑ sorry

lemma exists_comp_eq_id_contraction [ProSpreads.{0, 0} P]
    {Y : C} (f : Y ‚ü∂ P.contraction X) (hf : P f) :
    ‚àÉ (g : P.contraction X ‚ü∂ Y), g ‚â´ f = ùüô (P.contraction X) := by
  refine Precoverage.exists_comp_eq_id_contraction X P ?_ f hf
  intro A B g hg
  exact ‚ü®by simp [hg], by simp‚ü©

end MorphismProperty

end CategoryTheory
