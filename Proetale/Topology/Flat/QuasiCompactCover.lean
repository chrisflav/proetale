/-
Copyright (c) 2025 Christian Merten. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Christian Merten
-/
import Mathlib.AlgebraicGeometry.Morphisms.Affine
import Mathlib.AlgebraicGeometry.PullbackCarrier
import Mathlib.AlgebraicGeometry.Properties
import Mathlib.AlgebraicGeometry.Cover.Sigma
import Proetale.Topology.Flat.CompactOpenCovered
import Proetale.Mathlib.AlgebraicGeometry.Morphisms.Basic
import Proetale.Mathlib.AlgebraicGeometry.Cover.MorphismProperty

/-!
# Quasi-compact covers

A cover of a scheme is quasi-compact if every affine open of the base can be covered
by a finite union of images of quasi-compact opens of the components.

This is used to define the fpqc (faithfully flat, quasi-compact) topology, where covers are given by
flat covers that are quasi-compact.
-/

universe w u v

open CategoryTheory Limits MorphismProperty

namespace AlgebraicGeometry

instance {X Y Z : Scheme.{u}} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z)
    [QuasiCompact f] [CompactSpace Y] : CompactSpace ‚Üë(pullback f g) :=
  QuasiCompact.compactSpace_of_compactSpace (pullback.snd _ _)

instance {X Y Z : Scheme.{u}} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z)
    [QuasiCompact g] [CompactSpace X] : CompactSpace ‚Üë(pullback f g) :=
  QuasiCompact.compactSpace_of_compactSpace (pullback.fst _ _)

lemma IsAffineOpen.isCompact_pullback_inf {X Y Z : Scheme.{u}} {f : X ‚ü∂ Z} {g : Y ‚ü∂ Z}
    {U : X.Opens} (hU : IsAffineOpen U) {V : Y.Opens} (hV : IsCompact V.1)
    {W : Z.Opens} (hW : IsAffineOpen W) (hUW : U ‚â§ f ‚Åª¬π·µÅ W) (hVW : V ‚â§ g ‚Åª¬π·µÅ W) :
    IsCompact (pullback.fst f g ‚Åª¬π·µÅ U ‚äì pullback.snd f g ‚Åª¬π·µÅ V).1 := by
  have : IsAffine U.toScheme := hU
  have : IsAffine W.toScheme := hW
  have : CompactSpace V := isCompact_iff_compactSpace.mp hV
  let f' : U.toScheme ‚ü∂ W := f.resLE _ _ hUW
  let q : Scheme.Opens.toScheme V ‚ü∂ W :=
    IsOpenImmersion.lift W.Œπ (Scheme.Opens.Œπ _ ‚â´ g) <| by simpa [Set.range_comp]
  let p : pullback f' q ‚ü∂ pullback f g :=
    pullback.map _ _ _ _ U.Œπ (Scheme.Opens.Œπ _) W.Œπ (by simp [f']) (by simp [q])
  convert isCompact_range p.continuous
  simp [p, Scheme.Pullback.range_map]

variable {P : MorphismProperty Scheme.{u}} {S : Scheme.{u}}

/--
A cover of a scheme is quasi-compact if every affine open of the base can be covered
by a finite union of images of quasi-compact opens of the components.
-/
@[stacks 022B, mk_iff]
class Scheme.Cover.QuasiCompact (ùí∞ : Cover.{v} P S) : Prop where
  isCompactOpenCovered_of_isAffineOpen {U : S.Opens} (hU : IsAffineOpen U) :
    IsCompactOpenCovered (fun i ‚Ü¶ (ùí∞.map i).base) U.1

variable (ùí∞ : Scheme.Cover.{v} P S)

lemma IsAffineOpen.isCompactOpenCovered (ùí∞ : S.Cover P) [ùí∞.QuasiCompact]
    {U : S.Opens} (hU : IsAffineOpen U) :
    IsCompactOpenCovered (fun i ‚Ü¶ (ùí∞.map i).base) U.1 :=
  Scheme.Cover.QuasiCompact.isCompactOpenCovered_of_isAffineOpen hU

lemma Scheme.Cover.isCompactOpenCovered_of_isCompact (ùí∞ : S.Cover P) [ùí∞.QuasiCompact]
    {U : S.Opens} (hU : IsCompact U.1) :
    IsCompactOpenCovered (fun i ‚Ü¶ (ùí∞.map i).base) U.1 := by
  obtain ‚ü®Us, hUs, hUf, hUc‚ü© := (isBasis_affine_open S).exists_finite_of_isCompact hU
  refine .of_iUnion_eq_of_finite (SetLike.coe '' Us) (by aesop) (hUf.image _) ?_
  simpa using fun t ht ‚Ü¶ IsAffineOpen.isCompactOpenCovered ùí∞ (hUs ht)

namespace Scheme.Cover.QuasiCompact

variable {ùí∞ : Cover.{v} P S}

open TopologicalSpace.Opens

@[simp]
lemma weaken_iff {Q : MorphismProperty Scheme.{u}} (hPQ : P ‚â§ Q) {ùí∞ : Cover.{v} P S} :
    (ùí∞.weaken hPQ).QuasiCompact ‚Üî ùí∞.QuasiCompact := by
  simp_rw [quasiCompact_iff]

variable (ùí∞) in
lemma exists_isAffineOpen_of_isCompact [ùí∞.QuasiCompact] {U : S.Opens} (hU : IsCompact U.1) :
    ‚àÉ (n : ‚Ñï) (f : Fin n ‚Üí ùí∞.J) (V : ‚àÄ i, (ùí∞.obj (f i)).Opens),
      (‚àÄ i, IsAffineOpen (V i)) ‚àß
      ‚ãÉ i, (ùí∞.map (f i)).base '' (V i) = U := by
  obtain ‚ü®n, a, V, ha, heq‚ü© := (ùí∞.isCompactOpenCovered_of_isCompact hU).exists_mem_of_isBasis
    (fun i ‚Ü¶ isBasis_affine_open (ùí∞.obj i)) (fun _ _ h ‚Ü¶ h.isCompact)
  exact ‚ü®n, a, V, ha, heq‚ü©

/-- If the component maps of `ùí∞` are open, `ùí∞` is quasi-compact. This in particular
applies if `P` is flat and locally of finite presentation (fppf) and hence in particular
for (weakly)-√©tale and open covers. -/
@[stacks 022C]
lemma of_isOpenMap (h : ‚àÄ i, IsOpenMap (ùí∞.map i).base) :
    QuasiCompact ùí∞ where
  isCompactOpenCovered_of_isAffineOpen {U} hU := .of_isOpenMap
    (fun i ‚Ü¶ (ùí∞.map i).continuous) h (fun x _ ‚Ü¶ ‚ü®ùí∞.f x, ùí∞.covers x‚ü©) U.2 hU.isCompact

instance (ùí∞ : S.OpenCover) : ùí∞.QuasiCompact :=
  of_isOpenMap fun i ‚Ü¶ (ùí∞.map i).isOpenEmbedding.isOpenMap

open TopologicalSpace Opens

instance [P.IsStableUnderBaseChange] (ùí∞ : S.Cover P) [ùí∞.QuasiCompact] {T : Scheme.{u}} (f : T ‚ü∂ S) :
    (ùí∞.pullbackCover f).QuasiCompact := by
  refine ‚ü®fun {U'} hU' ‚Ü¶ ?_‚ü©
  wlog h : ‚àÉ (U : S.Opens), IsAffineOpen U ‚àß f.base '' U' ‚äÜ U generalizing U'
  ¬∑ refine .of_isCompact_of_forall_exists hU'.isCompact fun x hxU ‚Ü¶ ?_
    obtain ‚ü®W, hW, hx, _‚ü© := isBasis_iff_nbhd.mp (isBasis_affine_open S) (mem_top (f.base x))
    obtain ‚ü®W', hW', hx', hle‚ü© := isBasis_iff_nbhd.mp (isBasis_affine_open T)
      (show x ‚àà f ‚Åª¬π·µÅ W ‚äì U' from ‚ü®hx, hxU‚ü©)
    refine ‚ü®W', le_trans hle inf_le_right, by simpa [hx], W'.2, ?_‚ü©
    exact this hW' ‚ü®W, hW, by simpa using le_trans hle inf_le_left‚ü©
  obtain ‚ü®U, hU, hsub‚ü© := h
  obtain ‚ü®s, hf, V, hc, (heq : _ = (U : Set S))‚ü© := hU.isCompactOpenCovered ùí∞
  refine ‚ü®s, hf, fun i hi ‚Ü¶ pullback.fst f (ùí∞.map i) ‚Åª¬π·µÅ U' ‚äì pullback.snd f (ùí∞.map i) ‚Åª¬π·µÅ (V i hi),
      fun i hi ‚Ü¶ ?_, ?_‚ü©
  ¬∑ exact hU'.isCompact_pullback_inf (hc _ _) hU (by simpa using hsub) <| show _ ‚äÜ _ by
      simpa [‚Üê heq, Set.range_comp] using Set.subset_iUnion_of_subset i
        (Set.subset_iUnion_of_subset hi (Set.subset_preimage_image _ _))
  ¬∑ refine subset_antisymm (by simp) (fun x hx ‚Ü¶ ?_)
    have : f.base x ‚àà (U : Set S) := hsub ‚ü®x, hx, rfl‚ü©
    simp_rw [‚Üê heq, Set.mem_iUnion] at this
    obtain ‚ü®i, hi, y, hy, heq‚ü© := this
    simp_rw [Set.mem_iUnion]
    obtain ‚ü®z, hzl, hzr‚ü© := Pullback.exists_preimage_pullback x y heq.symm
    refine ‚ü®i, hi, z, ‚ü®by simpa [hzl], by simpa [hzr]‚ü©, hzl‚ü©

instance [P.IsStableUnderBaseChange] (ùí∞ : S.Cover P) [ùí∞.QuasiCompact] {T : Scheme.{u}} (f : T ‚ü∂ S) :
    (ùí∞.pullbackCover' f).QuasiCompact := by
  sorry

/-- If `ùí±` is a refinement of `ùí∞` such that `ùí±` is quasicompact, also `ùí∞` is quasicompact. -/
@[stacks 03L8]
lemma of_hom [P.IsMultiplicative] {ùí∞ ùí± : S.Cover P} (f : ùí± ‚ü∂ ùí∞) [ùí±.QuasiCompact] :
    ùí∞.QuasiCompact := by
  refine ‚ü®fun {U} hU ‚Ü¶ ?_‚ü©
  exact .of_comp (a := f.idx) (fun i ‚Ü¶ (ùí±.map i).base) (fun i ‚Ü¶ (f.app i).base)
    (fun _ ‚Ü¶ Hom.continuous _) (fun i ‚Ü¶ funext <| by simp [‚Üê Scheme.comp_base_apply])
    (fun _ ‚Ü¶ Hom.continuous _) U.2 (hU.isCompactOpenCovered ùí±)

lemma iff_sigma {ùí∞ : Cover.{u} P S} [IsLocalAtSource P] :
    ùí∞.QuasiCompact ‚Üî ùí∞.sigma.QuasiCompact := by
  wlog hP : P = ‚ä§
  ¬∑ rw [‚Üê weaken_iff le_top (ùí∞ := ùí∞), ‚Üê weaken_iff le_top (ùí∞ := ùí∞.sigma)]
    exact this rfl
  subst hP
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ ?_‚ü©
  ¬∑ rw [‚Üê weaken_iff le_top] at *
    exact of_hom (ùí∞.weaken le_top).toSigma
  ¬∑ refine ‚ü®fun {U} hU ‚Ü¶ ?_‚ü©
    have := hU.isCompactOpenCovered ùí∞.sigma
    rw [IsCompactOpenCovered.iff_isCompactOpenCovered_sigmaMk]
    rw [IsCompactOpenCovered.iff_of_unique] at this ‚ä¢
    obtain ‚ü®V, hV, hU‚ü© := this
    have heq : (fun a ‚Ü¶ (ùí∞.map a.1).base a.2) ‚àò (sigmaMk ùí∞.obj).symm = (ùí∞.sigma.map ‚ü®‚ü©).base := by
      apply (Equiv.comp_symm_eq _ _ _).mpr
      ext ‚ü®i, y‚ü©
      simp [‚Üê Scheme.comp_base_apply]
    refine ‚ü®‚ü®(sigmaMk ùí∞.obj).symm '' V.1, by simpa using V.2‚ü©, by simpa, ?_‚ü©
    simp only [sigma_J, PUnit.default_eq_unit, sigma_obj, carrier_eq_coe, ‚Üê Set.image_comp]
    convert hU

instance [P.ContainsIdentities] [P.RespectsIso] {X Y : Scheme.{u}} {f : X ‚ü∂ Y} [IsIso f] :
    (coverOfIsIso (P := P) f).QuasiCompact :=
  of_isOpenMap (fun _ ‚Ü¶ f.homeomorph.isOpenMap)

instance [P.IsStableUnderComposition] {X : Scheme.{u}} (ùí∞ : Cover.{v} P X) [ùí∞.QuasiCompact]
    (f : ‚àÄ (x : ùí∞.J), (ùí∞.obj x).Cover P) [‚àÄ x, (f x).QuasiCompact] :
    QuasiCompact (ùí∞.bind f) := by
  constructor
  intro U hU
  obtain ‚ü®s, hs, V, hcV, hU‚ü© := hU.isCompactOpenCovered ùí∞
  have (i hi) : IsCompactOpenCovered (fun k ‚Ü¶ ((f i).map k).base) (V i hi) :=
    (f i).isCompactOpenCovered_of_isCompact (hcV i hi)
  choose t ht W hcW hV using this
  have : Finite s := hs
  have (i hi) : Finite (t i hi) := ht i hi
  refine .of_finite (Œ∫ := Œ£ (i : s), t i.1 i.2) (fun p ‚Ü¶ ‚ü®p.1, p.2‚ü©) (fun p ‚Ü¶ W _ p.1.2 _ p.2.2)
    (fun p ‚Ü¶ hcW ..) ?_
  simpa [‚Üê hV, Set.iUnion_sigma, Set.iUnion_subtype, Set.image_iUnion, Set.image_image] using hU

end AlgebraicGeometry.Scheme.Cover.QuasiCompact
