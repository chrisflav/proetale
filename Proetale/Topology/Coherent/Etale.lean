/-
Copyright (c) 2025 Christian Merten. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Christian Merten
-/
import Mathlib
import Proetale.Mathlib.AlgebraicGeometry.Extensive
import Proetale.Mathlib.CategoryTheory.Limits.MorphismProperty

/-!
# The small √©tale site is (pre)coherent
-/

universe u

open CategoryTheory Limits

namespace CategoryTheory

variable {C : Type*} [Category C]

lemma Limits.ClosedUnderColimitsOfShape.discrete {Œπ : Type*} {P : ObjectProperty C}
    [P.IsClosedUnderIsomorphisms]
    (h : ‚àÄ {f : Œπ ‚Üí C} [HasColimit (Discrete.functor f)], (‚àÄ j, P (f j)) ‚Üí P (‚àê f)) :
    ClosedUnderColimitsOfShape (Discrete Œπ) P := by
  refine closedUnderColimitsOfShape_of_colimit fun {F} _ hF ‚Ü¶ ?_
  have : HasColimit (Discrete.functor (F.obj ‚àò Discrete.mk)) :=
    hasColimit_of_iso Discrete.natIsoFunctor.symm
  rw [P.prop_iff_of_iso <| HasColimit.isoOfNatIso Discrete.natIsoFunctor]
  exact h fun j ‚Ü¶ hF ‚ü®j‚ü©

instance (X : C) (P : MorphismProperty C) [P.RespectsIso] :
    ObjectProperty.IsClosedUnderIsomorphisms fun Y : Over X ‚Ü¶ P Y.hom := by
  constructor
  intro Y Z e hY
  simpa [‚Üê P.cancel_left_of_respectsIso e.hom.left]

end CategoryTheory

namespace AlgebraicGeometry

variable (X : Scheme.{u})

variable (P : MorphismProperty Scheme.{u})

lemma IsLocalAtSource.closedUnderColimitsOfShape_discrete (J : Type*) [Small.{u} J]
    [IsLocalAtSource P] :
    ClosedUnderColimitsOfShape (Discrete J) (fun Y : Over X ‚Ü¶ P Y.hom) := by
  refine Limits.ClosedUnderColimitsOfShape.discrete fun {f} _ hf ‚Ü¶ ?_
  have : (PreservesCoproduct.iso (Over.forget X) _).inv ‚â´ (‚àê f).hom =
      Sigma.desc fun j ‚Ü¶ (f j).hom := by
    refine Limits.Sigma.hom_ext _ _ fun j ‚Ü¶ ?_
    rw [PreservesCoproduct.inv_hom, Limits.Œπ_comp_sigmaComparison_assoc]
    simp
  rw [‚Üê P.cancel_left_of_respectsIso (PreservesCoproduct.iso (Over.forget X) _).inv, this]
  exact IsLocalAtSource.sigmaDesc hf

noncomputable instance IsLocalAtSource.createsColimitsOfShape_forget (J : Type*) [Small.{u} J]
    [IsLocalAtSource P] :
    CreatesColimitsOfShape (Discrete J) (MorphismProperty.Over.forget P ‚ä§ X) :=
  MorphismProperty.Comma.forgetCreatesColimitsOfShapeOfClosed _
    (IsLocalAtSource.closedUnderColimitsOfShape_discrete _ _ _)

noncomputable instance (J : Type*) [Small.{u} J] [IsLocalAtSource P] :
    HasCoproductsOfShape J (MorphismProperty.Over P ‚ä§ X) :=
  MorphismProperty.Comma.hasColimitsOfShape_of_closedUnderColimitsOfShape _
    (IsLocalAtSource.closedUnderColimitsOfShape_discrete _ _ _)

noncomputable instance [IsLocalAtSource P] : HasFiniteCoproducts (MorphismProperty.Over P ‚ä§ X) where
  out := inferInstance

instance : FinitaryExtensive (Over X) :=
  finitaryExtensive_of_preserves_and_reflects_isomorphism (Over.forget X)

instance [IsLocalAtSource P] [P.IsStableUnderBaseChange] [P.IsStableUnderComposition]
    [P.HasOfPostcompProperty P] :
    FinitaryExtensive (MorphismProperty.Over P ‚ä§ X) :=
  finitaryExtensive_of_preserves_and_reflects_isomorphism (MorphismProperty.Over.forget P ‚ä§ X)

instance (J : Type*) [Small.{u} J] : HasCoproductsOfShape J X.Etale := by
  dsimp [Scheme.Etale]
  infer_instance

noncomputable instance (J : Type*) [Small.{u} J] :
    CreatesColimitsOfShape (Discrete J) (Scheme.Etale.forget X) := by
  dsimp [Scheme.Etale.forget, Scheme.Etale]
  infer_instance

noncomputable instance : CreatesLimitsOfShape WalkingCospan (Scheme.Etale.forget.{u} X) :=
  CategoryTheory.MorphismProperty.Over.createsLimitsOfShape_walkingCospan _ _

instance : FinitaryExtensive X.Etale := by
  dsimp [Scheme.Etale]
  infer_instance

instance (X : Scheme) [Nonempty X] : Nontrivial Œì(X, ‚ä§) := by
  have : Nonempty (‚ä§ : X.Opens) := ‚ü®‚ü®Nonempty.some ‚Äπ_‚Ä∫, trivial‚ü©‚ü©
  apply Scheme.component_nontrivial

lemma Scheme.exists_nontrivial_hom_of_nonempty (X : Scheme) [Nonempty X] :
    ‚àÉ (Y : Scheme), Nontrivial (X ‚ü∂ Y) := by
  refine ‚ü®ùî∏(Unit; X), AffineSpace.homOfVector (ùüô X) 0, AffineSpace.homOfVector (ùüô X) 1, ?_‚ü©
  rw [ne_eq, AffineSpace.hom_ext_iff]
  simp

instance {X Y : Scheme} (f : X ‚ü∂ Y) [Epi f] [Nonempty Y] [Subsingleton Y] : Surjective f := by
  by_contra h
  have : IsEmpty X := ‚ü®fun x ‚Ü¶ h ‚ü®fun y ‚Ü¶ ‚ü®x, Subsingleton.elim _ _‚ü©‚ü©‚ü©
  obtain ‚ü®Z, ‚ü®g‚ÇÅ, g‚ÇÇ, hne‚ü©‚ü© := Y.exists_nontrivial_hom_of_nonempty
  apply hne
  rw [‚Üê cancel_epi f]
  apply isInitialOfIsEmpty.hom_ext _ _

@[simp]
lemma Scheme.Hom.apply_fiberŒπ {X Y : Scheme} (f : X ‚ü∂ Y) (y : Y) (x : f.fiber y) :
    f.base ((f.fiberŒπ y).base x) = y := by
  rw [‚Üê Set.mem_singleton_iff, ‚Üê Set.mem_preimage, ‚Üê Scheme.Hom.range_fiberŒπ]
  use x

/-- Universal effective epimorphisms in the category of schemes are surjective. -/
instance {X Y : Scheme} (f : X ‚ü∂ Y)
    [‚àÄ {Z} (g : Z ‚ü∂ Y), EffectiveEpi (pullback.snd f g)] : Surjective f := by
  constructor
  intro y
  let g := Y.fromSpecResidueField y
  have h : Surjective (pullback.snd f g) := inferInstance
  obtain ‚ü®x, hx‚ü© := h.1 default
  use (f.fiberŒπ y).base x
  simp

instance : Preregular X.Etale :=
  sorry

end AlgebraicGeometry
