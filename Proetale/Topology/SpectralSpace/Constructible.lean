/-
Copyright (c) 2025 Jiedong Jiang, Christian Merten. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jiedong Jiang, Christian Merten
-/
import Proetale.Mathlib.Topology.Inseparable
import Mathlib.Topology.Spectral.Basic
import Mathlib.Topology.JacobsonSpace

/-!
# Constructible topology

In this file we define the constructible topology on a topological space. This is the topology
generated by compact open subsets and their complements.
-/

variable {X : Type*} [TopologicalSpace X]

/-- The constructible topology on a topological space `X` has as a subbasis
the open and compact sets of `X` and their complements. -/
def constructibleTopology (X : Type*) [TopologicalSpace X] : TopologicalSpace X :=
  .generateFrom ({ s | IsOpen s ∧ IsCompact s } ∪ { s | IsClosed s ∧ IsCompact sᶜ })

/-- A type synonym for `X` that is equipped with the constructible topology of `X`. -/
def WithConstructibleTopology (X : Type*) [TopologicalSpace X] : Type _ :=
  X

instance : TopologicalSpace (WithConstructibleTopology X) :=
  constructibleTopology X

open Topology

lemma IsCompact.isOpen_constructibleTopology_of_isOpen {s : Set X}
    (hs : IsCompact s) (ho : IsOpen s) : IsOpen[constructibleTopology X] s := by
  apply TopologicalSpace.isOpen_generateFrom_of_mem
  simp [ho, hs]

lemma IsCompact.isOpen_constructibleTopology_of_isClosed {s : Set X}
    (hs : IsCompact sᶜ) (ho : IsClosed s) : IsOpen[constructibleTopology X] s := by
  apply TopologicalSpace.isOpen_generateFrom_of_mem
  simp [ho, hs]

/-- A spectral space is compact in the constructible topology. -/
instance compactSpace_withConstructibleTopology [SpectralSpace X] :
    CompactSpace (WithConstructibleTopology X) :=
  sorry

/-- If `s` is closed in the constructible topology and `x` is in the closure of `s`, then
it is the specialization of a point in `s`. -/
lemma exists_specializes_of_isClosed_constructibleTopology_of_mem_closure [SpectralSpace X]
    {s : Set X} (hs : IsClosed[constructibleTopology X] s) {x : X} (hx : x ∈ closure s) :
    ∃ y ∈ s, y ⤳ x :=
  sorry

/-- If `s` is closed in the constructible topology and stable under specialization, it is closed. -/
lemma IsClosed.of_isClosed_constructibleTopology [SpectralSpace X] {s : Set X}
    (hs : IsClosed[constructibleTopology X] s) (h : StableUnderSpecialization s) :
    IsClosed s := by
  rw [← closure_subset_iff_isClosed]
  intro x hx
  obtain ⟨y, hy, hx⟩ :=
    exists_specializes_of_isClosed_constructibleTopology_of_mem_closure hs hx
  exact h hx hy
