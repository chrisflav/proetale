import Mathlib.CategoryTheory.Sites.Sheaf

universe v

namespace CategoryTheory

open Limits Opposite

variable {C : Type*} [Category C]

/--
If
- `F` contravariantly maps (suitable) coproducts to products,
- (suitable) coproducts exist in `C`, and
- (suitable) coproducts distribute over pullbacks, then:

`F` is a sheaf for the single object covering `{ ‚àê·µ¢ Y·µ¢ ‚ü∂ X }`
if and only if it is a presieve for `{ f·µ¢ : Y·µ¢ ‚ü∂ X }·µ¢`.

Note: The second two conditions are satisfied if `C` is (finitary) extensive.
-/
lemma Presieve.isSheafFor_sigmaDesc_iff {F : C·µí·µñ ‚•§ Type v} {X : C} {Œπ : Type*} [Small.{v} Œπ]
    {Y : Œπ ‚Üí C}
    (f : ‚àÄ i, Y i ‚ü∂ X) [(ofArrows Y f).HasPairwisePullbacks]
    [HasCoproduct Y] [HasCoproduct fun (ij : Œπ √ó Œπ) ‚Ü¶ pullback (f ij.1) (f ij.2)]
    [HasPullback (Limits.Sigma.desc f) (Limits.Sigma.desc f)]
    [PreservesLimit (Discrete.functor <| fun i ‚Ü¶ op (Y i)) F]
    [PreservesLimit (Discrete.functor fun (ij : Œπ √ó Œπ) ‚Ü¶ op (pullback (f ij.1) (f ij.2))) F]
    [IsIso (Limits.Sigma.desc fun (ij : Œπ √ó Œπ) ‚Ü¶ Limits.pullback.map (f ij.fst) (f ij.snd)
      (Limits.Sigma.desc f) (Limits.Sigma.desc f) (Limits.Sigma.Œπ _ _) (Limits.Sigma.Œπ _ _) (ùüô X)
      (by simp) (by simp))] :
    Presieve.IsSheafFor F (.singleton <| Limits.Sigma.desc f) ‚Üî
      Presieve.IsSheafFor F (.ofArrows Y f) := by
  let e : (‚àê fun (ij : Œπ √ó Œπ) ‚Ü¶ pullback (f ij.1) (f ij.2)) ‚ü∂
      pullback (Limits.Sigma.desc f) (Limits.Sigma.desc f) :=
    Limits.Sigma.desc fun ij ‚Ü¶
    pullback.map _ _ _ _ (Limits.Sigma.Œπ _ _) (Limits.Sigma.Œπ _ _) (ùüô X) (by simp) (by simp)
  rw [Equalizer.Presieve.isSheafFor_singleton_iff (pullback.cone _ _) (pullback.isLimit _ _),
    Equalizer.Presieve.Arrows.sheaf_condition]
  refine (Fork.isLimitEquivOfIsos _ _ ?_ ?_ ?_ ?_ ?_ ?_).nonempty_congr
  ¬∑ exact F.mapIso (opCoproductIsoProduct Y) ‚â™‚â´ PreservesProduct.iso F _
  ¬∑ exact F.mapIso (.op <| asIso e) ‚â™‚â´ F.mapIso (opCoproductIsoProduct _) ‚â™‚â´
      PreservesProduct.iso F _
  ¬∑ exact Iso.refl _
  ¬∑ refine Pi.hom_ext _ _ fun ij ‚Ü¶ ?_
    simp only [Iso.trans_hom, Functor.mapIso_hom, PreservesProduct.iso_hom, Category.assoc,
      limit.cone_x, PullbackCone.fst_limit_cone, Iso.op_hom, asIso_hom, e, piComparison_comp_œÄ,
      Equalizer.Presieve.Arrows.firstMap]
    rw [‚Üê F.map_comp, opCoproductIsoProduct_hom_comp_œÄ, ‚Üê F.map_comp, ‚Üê op_comp, Sigma.Œπ_desc,
      ‚Üê F.map_comp, ‚Üê op_comp, pullback.lift_fst, Pi.lift_œÄ, piComparison_comp_œÄ_assoc,
      ‚Üê F.map_comp, ‚Üê F.map_comp]
    simp
  ¬∑ refine Pi.hom_ext _ _ fun ij ‚Ü¶ ?_
    simp only [Iso.trans_hom, Functor.mapIso_hom, PreservesProduct.iso_hom, Category.assoc,
      limit.cone_x, PullbackCone.snd_limit_cone, Iso.op_hom, asIso_hom, e, piComparison_comp_œÄ,
      Equalizer.Presieve.Arrows.secondMap]
    rw [‚Üê F.map_comp, opCoproductIsoProduct_hom_comp_œÄ, ‚Üê F.map_comp, ‚Üê op_comp, Sigma.Œπ_desc,
      ‚Üê F.map_comp, ‚Üê op_comp, pullback.lift_snd, Pi.lift_œÄ, piComparison_comp_œÄ_assoc,
      ‚Üê F.map_comp, ‚Üê F.map_comp]
    simp
  ¬∑ refine Pi.hom_ext _ _ fun i ‚Ü¶ ?_
    simp only [Fork.ofŒπ_pt, Fork.Œπ_ofŒπ, Iso.trans_hom, Functor.mapIso_hom, PreservesProduct.iso_hom,
      Category.assoc, piComparison_comp_œÄ]
    rw [‚Üê F.map_comp, ‚Üê F.map_comp, opCoproductIsoProduct_hom_comp_œÄ, ‚Üê op_comp, Sigma.Œπ_desc]
    simp [Equalizer.Presieve.Arrows.forkMap]

end CategoryTheory
